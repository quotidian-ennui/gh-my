#!/usr/bin/env bash
set -eo pipefail

TEMPLATE='{{tablerow "Num" "Title" "Who" "URL" "When" -}}
{{range(pluck "node" .data.search.edges) -}}
{{tablerow (printf "#%v" .number | autocolor "green") .title .author.login (.url | autocolor "cyan") (timeago .createdAt)  -}}
{{end -}}
{{tablerender}}'

function query_help()
{
  cat << EOF

Usage: gh my [issues|prs|reviews|workload|deployments] [options]
  issues:      list issues in your personal repositories
  prs:         list PRs in your persional repositories
  reviews:     list PRs where you've been asked for a review
  workload:    list PRs and issues where you are the assignee
  deployments: list deployments awaiting action on the default branch

Listing deployments needs more filters
  -o : the organisation (e.g. -o my-company)
  -t : the topic  (e.g. -o my-terraform-repos)
  -r : a specific repository, but why not use gh run list instead?
EOF
 exit 1
}

function query_workload() {
  # shellcheck disable=SC2016
  query='query ($endCursor: String){
          search(query: "is:open assignee:@me archived:false",after: $endCursor, type: ISSUE, first: 50) {
            edges {
              node {
                ... on PullRequest {
                  number
                  title
                  author {
                    login
                  }
                  reviewDecision
                  createdAt
                  url
                  repository {
                    nameWithOwner
                    name
                  }
                }
                ... on Issue {
                  number
                  title
                  author {
                    login
                  }
                  createdAt
                  url
                  repository {
                    nameWithOwner
                    name
                  }
                }
              }
            }
            pageInfo {
              hasNextPage
              endCursor
            }
          }
        }'
  gh api graphql --paginate --raw-field query="$query" --template "$TEMPLATE"
}

function query_reviews() {
  # shellcheck disable=SC2016
  query='query ($endCursor: String){
          search(query: "is:open is:pr review-requested:@me archived:false", after: $endCursor, type: ISSUE, first: 50) {
            edges {
              node {
                ... on PullRequest {
                  number
                  title
                  author {
                     login
                  }
                  reviewDecision
                  createdAt
                  url
                  repository {
                    nameWithOwner
                    name
                  }
                }
              }
            }
            pageInfo {
              hasNextPage
              endCursor
            }
          }
        }'
  gh api graphql --paginate --raw-field query="$query" --template "$TEMPLATE"
}

function query_issues() {
  # shellcheck disable=SC2016
  query='query ($endCursor: String) {
          search(query: "is:open is:issue user:@me archived:false", type: ISSUE, after: $endCursor, first: 50) {
            edges {
              node {
                ... on Issue {
                  number
                  title
                  author {
                    login
                  }
                  createdAt
                  url
                  repository {
                    nameWithOwner
                    name
                  }
                }
              }
            }
            pageInfo {
              hasNextPage
              endCursor
            }
          }
        }'
  gh api graphql --paginate --raw-field query="$query" --template "$TEMPLATE"
}

function query_prs() {
  # shellcheck disable=SC2016
  query='query ($endCursor: String) {
          search(query: "is:open is:pr user:@me archived:false", type: ISSUE, after: $endCursor, first: 50) {
            edges {
              node {
                ... on PullRequest {
                  number
                  title
                  author {
                    login
                  }
                  createdAt
                  url
                  repository {
                    nameWithOwner
                    name
                  }
                }
              }
            }
            pageInfo {
              hasNextPage
              endCursor
            }
          }
        }'
  gh api graphql --paginate --raw-field query="$query" --template "$TEMPLATE"
}

function query_deployments() {
  org=''
  topic=''
  repo=''
  while getopts 'o:t:r:' flag; do
    case "${flag}" in
    o) org="org:${OPTARG}" ;;
    t) topic="topic:${OPTARG}" ;;
    r) repo="repo:${OPTARG}" ;;
    *) query_help ;;
    esac
  done
  if [[ "$org" == "" && $topic = "" && $repo = "" ]]; then
    query_help
  fi
  # shellcheck disable=SC2016
  deploy_template='{{tablerow "Repo" "ID" "Env" "Actionable" "URL" "When" -}}
{{range(pluck "node" .data.search.edges) -}}{{ $repo:=.nameWithOwner -}}
{{range(pluck "checkRuns" .defaultBranchRef.target.checkSuites.nodes) -}}{{range .nodes -}}
{{tablerow $repo (.databaseId | autocolor "green") .pendingDeploymentRequest.environment.name .pendingDeploymentRequest.currentUserCanApprove (.url | autocolor "cyan") (timeago .startedAt) -}}{{end -}}
{{tablerender}}{{end -}}{{end -}}
'
  queryString="$repo $org $topic"
  # shellcheck disable=SC2016
  query='query($queryString: String!, $endCursor: String) {
      search(query: $queryString type: REPOSITORY, first: 100, after: $endCursor ) {
        edges {
          node {
            ... on Repository {
              nameWithOwner
              defaultBranchRef {
                target {
                  ... on Commit {
                    checkSuites(filterBy: {appId: 15368}, last: 1) {
                      nodes {
                        checkRuns(filterBy: {status: WAITING}, last: 1) {
                          nodes {
                            databaseId
                            url
                            startedAt
                            pendingDeploymentRequest {
                              environment {
                                name
                              }
                              currentUserCanApprove
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        pageInfo {
          hasNextPage
          endCursor
        }
      }
    }'
  gh api graphql --paginate -F queryString="$queryString" --raw-field query="$query" --template "$deploy_template"
}

ACTION=$1 || true
ACTION=${ACTION:="help"}
if [[ "$#" -ne "0" ]]; then shift; fi
"query_${ACTION}" "$@"

