#!/usr/bin/env bash

PR_ALL_REPOS_QUERY="is:open is:pr user:@me archived:false"

_prs_repo_query() {
  gitRemote=$(git remote get-url origin 2>/dev/null | grep "github.com" | cut -f2 -d':') || true
  gitRemote=$(helper::giturl_to_base "$gitRemote")
  if [[ -n "$gitRemote" ]]; then
    echo "is:open is:pr repo:$gitRemote archived:false"
  else
    echo "$PR_ALL_REPOS_QUERY"
  fi
}

query_prs() {
  #shellcheck disable=SC2034
  #shellcheck disable=SC2016
  local table_template='{{tablerow "" "Num" "Title" "Who" "URL" "When" -}}
  {{range(pluck "node" .data.search.edges) -}}
  {{ $review := "‚ùî" -}}
  {{ $status := "‚ùî" -}}
  {{ if index . "reviewDecision" -}}
    {{ if eq .reviewDecision "CHANGES_REQUESTED" -}}
      {{ $review = "‚úíÔ∏è" -}}
    {{ end -}}
    {{ if eq .statusCheckRollup.state "REVIEW_REQUIRED" -}}
      {{ $review = "üîé" -}}
    {{ end -}}
    {{ if eq .reviewDecision "APPROVED" -}}
      {{ $review = "üëç" -}}
    {{ end -}}
  {{ end -}}
  {{ if index . "statusCheckRollup" -}}
    {{ if eq .statusCheckRollup.state "PENDING" -}}
      {{ $status = "‚è±Ô∏è" -}}
    {{ end -}}
    {{ if eq .statusCheckRollup.state "FAILURE" -}}
      {{ $status = "‚õî" -}}
    {{ end -}}
    {{ if eq .statusCheckRollup.state "SUCCESS" -}}
      {{ $status = "‚úÖ" -}}
    {{ end -}}
  {{ end -}}
  {{ $draft := "üõ´" -}}
  {{ if eq .isDraft true -}}
    {{ $draft = "üî®" -}}
  {{ end -}}
  {{tablerow ( printf "%s%s%s" $status $review $draft) (printf "#%v" .number | autocolor "green") .title .author.login (.url | autocolor "cyan") (timeago .createdAt)  -}}
  {{end -}}
  {{tablerender}}'

  local jq_filter='.data.search.edges[] | .node | { "number":.number, "title": .title, "login": .author.login, "statusRollup": .statusCheckRollup.state, "reviewDecision": .reviewDecision, "isDraft": .isDraft, "url": .url, "createdAt": .createdAt}'
  # shellcheck disable=SC2016
  local query='
query ($queryString: String!,$endCursor: String) {
  search(query: $queryString, type: ISSUE, after: $endCursor, first: 50) {
    edges {
      node {
        ... on PullRequest {
          number
          title
          author {
            login
          }
          createdAt
          url
          repository {
            nameWithOwner
            name
          }
          statusCheckRollup {
            state
          }
          reviewDecision
          isDraft
        }
      }
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}'

  local queryString
  queryString=$(_prs_repo_query)
  while getopts 'ja' flag; do
    case "${flag}" in
    j) output_format="json" ;;
    a) queryString="$PR_ALL_REPOS_QUERY" ;;
    *) query_help ;;
    esac
  done
  case $output_format in
  json)
    gh api graphql --paginate -F queryString="$queryString" --raw-field query="$(helper::compressQuery "$query")" --jq "$jq_filter" | jq -c "."
    ;;
  *)
    gh api graphql --paginate -F queryString="$queryString" --raw-field query="$(helper::compressQuery "$query")" --template "$table_template"
    ;;
  esac
}
